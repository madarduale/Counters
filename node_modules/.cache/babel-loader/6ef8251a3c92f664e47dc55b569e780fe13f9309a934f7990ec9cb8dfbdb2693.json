{"ast":null,"code":"var _jsxFileName = \"/home/madard/react-apps/my-app/src/components/counter.jsx\";\nimport React from \"react\";\nimport { Component } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass Counter extends Component {\n  constructor(...args) {\n    super(...args);\n    // property of component, and its object that hold all data that component needs\n    // and it can be object inside another object (all data )\n    this.state = {\n      count: 0,\n      // ImageUrl: 'https://picsum.photos/200'\n      tags: []\n    };\n    // adding style using style object\n    // style = {\n    //     fontSize: 20,\n    //     fontWeight: 'bold',\n    //     color : 'blue'\n    // };\n    //helper method\n    // renderTags(){\n    //     if (this.state.tags.length === 0) return <p>There is no tags!</p>;\n    //     return <ul>{this.state.tags.map(tag => <li key={tag}>{tag}</li>)}</ul> // each item should have uniqeu id to react know which item deleted or updated\n    // }\n    // handlerIncrement(){\n    //     console.log(\"increment\",this); // 'this' is undefined when we call in this(current) mothed \n    //     /// The reason why 'this' is undefined when you call it in an event handler method is because the value of 'this' depends on how the function is invoked, \n    //     //not how it is defined. When you pass a function reference as an event handler, such as onClick={this.handlerIncrement}, \n    //     //the function is called without a receiver object, so 'this' is set to the global object (window) or undefined in strict mode. \n    //     //To fix this, you have to bind the function to the correct 'this' value, either by using an arrow function, such as onClick={() => this.handlerIncrement()}, \n    //     //or by using the bind method, such as onClick={this.handlerIncrement.bind(this)}\n    // }\n    this.handlerIncrement = () => {\n      console.log(\"increment\", this);\n\n      // UPDATING STATES: we use method from component class\n      this.setState({\n        counter: this.state.count + 1\n      }); // it overrides count property and update\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Counter Component\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this), \"  \", \" \", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: this.getBadgetClass(),\n        children: this.counterDisplay()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this), \" \", \" \", \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handlerIncrement,\n        className: \"btn btn-secondary btn-sm\",\n        children: \"INCREMENT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), \" \"]\n    }, void 0, true);\n  }\n  counterDisplay() {\n    // return this.state.count == 0 ?  \"zero\" : this.state.count \n    // easy way peek or extract count from this state\n    // and store constant count variable\n    const {\n      counter\n    } = this.state;\n    return counter === 0 ? \"zero\" : counter;\n  }\n\n  // rendering classes dynamically\n  getBadgetClass() {\n    let classes = \"badge m-2 text-bg-\"; // stored main classes, that not changed with conditions\n    classes += this.state.count === 0 ? \"warning\" : \"primary\"; // changed class with condition\n    return classes;\n  }\n}\nexport default Counter;","map":{"version":3,"names":["React","Component","jsxDEV","_jsxDEV","Fragment","_Fragment","Counter","constructor","args","state","count","tags","handlerIncrement","console","log","setState","counter","render","children","fileName","_jsxFileName","lineNumber","columnNumber","className","getBadgetClass","counterDisplay","onClick","classes"],"sources":["/home/madard/react-apps/my-app/src/components/counter.jsx"],"sourcesContent":["import React from \"react\";\nimport { Component } from \"react\";\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nclass Counter extends Component{\n    // property of component, and its object that hold all data that component needs\n    // and it can be object inside another object (all data )\n\n    state = {\n        count: 0,\n        // ImageUrl: 'https://picsum.photos/200'\n        tags : []\n    };\n    // adding style using style object\n    // style = {\n    //     fontSize: 20,\n    //     fontWeight: 'bold',\n    //     color : 'blue'\n    // };\n\n    //helper method\n    // renderTags(){\n    //     if (this.state.tags.length === 0) return <p>There is no tags!</p>;\n    //     return <ul>{this.state.tags.map(tag => <li key={tag}>{tag}</li>)}</ul> // each item should have uniqeu id to react know which item deleted or updated\n        \n    // }\n\n    // handlerIncrement(){\n    //     console.log(\"increment\",this); // 'this' is undefined when we call in this(current) mothed \n    //     /// The reason why 'this' is undefined when you call it in an event handler method is because the value of 'this' depends on how the function is invoked, \n    //     //not how it is defined. When you pass a function reference as an event handler, such as onClick={this.handlerIncrement}, \n    //     //the function is called without a receiver object, so 'this' is set to the global object (window) or undefined in strict mode. \n    //     //To fix this, you have to bind the function to the correct 'this' value, either by using an arrow function, such as onClick={() => this.handlerIncrement()}, \n    //     //or by using the bind method, such as onClick={this.handlerIncrement.bind(this)}\n    // }\n\n    handlerIncrement = () =>{\n        console.log(\"increment\", this);\n\n        // UPDATING STATES: we use method from component class\n        this.setState({counter: this.state.count + 1}); // it overrides count property and update\n\n    }\n\n    render(){\n        \n        return(\n            <>\n            <h1>Counter Component</h1>\n            {/* Adding attribute source value dynamically */}\n            {/* <img src={this.state.ImageUrl} alt=\"\" /> */}\n\n            {/* applaying class attribute (className) */}\n            {/* applying style object to style attribute using jsx expressions */}\n            {/* <span style={this.style } className=\"badge badge-primary\">{this.counterDisplay()}</span> */}\n\n            {/* OR apply inline style */}\n            {/* <span style={{fontSize: 30, color: 'blueviolet'} } className=\"badge badge-primary\">{this.counterDisplay()}</span> */}\n\n            {/* rendering classes dynamically */}\n            {/* <span className={this.getBadgetClass()}>{this.counterDisplay()}</span>\n            <button className=\"btn btn-secondary btn-sm\">INCREMENT</button> */}\n\n            {/* <ul> */}\n               {/* {this.state.tags.map(tag => <li key={tag}>{tag}</li>)}*/}  {/* each item should have uniqeu id to react know which item deleted or updated */}\n            {/* </ul> */}\n\n            {/* CONDITIONAL RENDERING */}\n            {/*{this.state.tags.length === 0 && <p>Please create tage</p>}*/} {/* if first statement will display second statement else nothing, if you add third statement, and privous two statements are two third will display and so on */}\n            {/*{this.state.count === 0 ?  <p>no value</p> : this.state.count}*/} {/* its like if and else. if statement is true display what after ? else what after :*/}\n            {/* {this.renderTags()} */}\n\n            <span className={this.getBadgetClass()}>{this.counterDisplay()}</span>\n            {/*<button onClick={this.handlerIncrement} className=\"btn btn-secondary btn-sm\">INCREMENT</button>*/} {/* we dont call the mothed just we pass as property, when we use even handlers */}\n            {/*<button onClick={this.handlerIncrement.bind(this)} className=\"btn btn-secondary btn-sm\">INCREMENT</button>*/} {/* by using the bind method, such as onClick={this.handlerIncrement.bind(this)} */}\n            {/*<button onClick={ = () => this.handlerIncrement()} className=\"btn btn-secondary btn-sm\">INCREMENT</button>*/} {/* either by using an arrow function, such as onClick={() => this.handlerIncrement()} */}\n            <button onClick={this.handlerIncrement} className=\"btn btn-secondary btn-sm\">INCREMENT</button> {/* we dont call the mothed just we pass as property, when we use even handlers, reference 'this' using arrow function */}\n            </>\n\n        );\n    \n    }\n    counterDisplay() {\n        // return this.state.count == 0 ?  \"zero\" : this.state.count \n        // easy way peek or extract count from this state\n        // and store constant count variable\n        const {counter} = this.state;\n        return counter === 0 ?  \"zero\" : counter;\n\n    }\n\n    // rendering classes dynamically\n    getBadgetClass(){\n        let classes = \"badge m-2 text-bg-\"; // stored main classes, that not changed with conditions\n        classes += (this.state.count === 0) ? \"warning\" : \"primary\"; // changed class with condition\n        return classes;\n    }\n}   \n\n\n\nexport default Counter;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,OAAO;AAEjC,OAAO,kCAAkC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1C,MAAMC,OAAO,SAASL,SAAS;EAAAM,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAC3B;IACA;IAAA,KAEAC,KAAK,GAAG;MACJC,KAAK,EAAE,CAAC;MACR;MACAC,IAAI,EAAG;IACX,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IAEA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAAA,KAEAC,gBAAgB,GAAG,MAAK;MACpBC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC;;MAE9B;MACA,IAAI,CAACC,QAAQ,CAAC;QAACC,OAAO,EAAE,IAAI,CAACP,KAAK,CAACC,KAAK,GAAG;MAAC,CAAC,CAAC,CAAC,CAAC;IAEpD,CAAC;EAAA;EAEDO,MAAMA,CAAA,EAAE;IAEJ,oBACId,OAAA,CAAAE,SAAA;MAAAa,QAAA,gBACAf,OAAA;QAAAe,QAAA,EAAI;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAgBsC,IAAE,EAID,GAAC,EACE,GAAC,eAGrEnB,OAAA;QAAMoB,SAAS,EAAE,IAAI,CAACC,cAAc,CAAC,CAAE;QAAAN,QAAA,EAAE,IAAI,CAACO,cAAc,CAAC;MAAC;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,EAC+B,GAAC,EACU,GAAC,EACD,GAAC,eACjHnB,OAAA;QAAQuB,OAAO,EAAE,IAAI,CAACd,gBAAiB;QAACW,SAAS,EAAC,0BAA0B;QAAAL,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,KAAC;IAAA,eAC9F,CAAC;EAIX;EACAG,cAAcA,CAAA,EAAG;IACb;IACA;IACA;IACA,MAAM;MAACT;IAAO,CAAC,GAAG,IAAI,CAACP,KAAK;IAC5B,OAAOO,OAAO,KAAK,CAAC,GAAI,MAAM,GAAGA,OAAO;EAE5C;;EAEA;EACAQ,cAAcA,CAAA,EAAE;IACZ,IAAIG,OAAO,GAAG,oBAAoB,CAAC,CAAC;IACpCA,OAAO,IAAK,IAAI,CAAClB,KAAK,CAACC,KAAK,KAAK,CAAC,GAAI,SAAS,GAAG,SAAS,CAAC,CAAC;IAC7D,OAAOiB,OAAO;EAClB;AACJ;AAIA,eAAerB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}