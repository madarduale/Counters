{"ast":null,"code":"var _jsxFileName = \"/home/madard/react-apps/my-app/src/components/counters.jsx\";\nimport React from 'react';\nimport { Component } from 'react';\nimport Counter from './counter';\n\n// COMPASING COMPONENTS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Counters extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      counters: [{\n        id: 1,\n        value: 20\n      }, {\n        id: 2,\n        value: 0\n      }, {\n        id: 3,\n        value: 0\n      }, {\n        id: 4,\n        value: 0\n      }, {\n        id: 5,\n        value: 0\n      }]\n    };\n    this.deleteHandler = counterId => {\n      // it handles event from another component to change something to local state \n      // we pass this method in component as attribute value\n      // return console.log(\"delete handler called\", counterId);\n\n      //  When we want update states on change something we can directly we overrite. we take all elements and change what we want and send back\n      const counters = this.state.counters.filter(counter => counter.id !== counterId);\n      //this.setState({counters : counters}) ; // first counters is state property that is overriting using as key, and second is const object used as value defained line 25\n      this.setState({\n        counters\n      }); // if they are same we just write one\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"  \", \"  \", this.state.counters.map(counter => /*#__PURE__*/_jsxDEV(Counter, {\n        value: counter.value,\n        onDelete: this.deleteHandler,\n        id: counter.id\n      }, counter.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 50\n      }, this)), \"  \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default Counters;","map":{"version":3,"names":["React","Component","Counter","jsxDEV","_jsxDEV","Counters","constructor","args","state","counters","id","value","deleteHandler","counterId","filter","counter","setState","render","children","map","onDelete","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/madard/react-apps/my-app/src/components/counters.jsx"],"sourcesContent":["import React from 'react';\nimport { Component } from 'react';\nimport Counter from './counter';\n\n\n\n// COMPASING COMPONENTS\nclass Counters extends Component{\n    state = {\n        counters : [\n            {id : 1, value : 20 },\n            {id : 2, value : 0 },\n            {id : 3, value : 0 },\n            {id : 4, value : 0 },\n            {id : 5, value : 0 }\n        ]\n    }\n\n    deleteHandler = (counterId) =>{\n        // it handles event from another component to change something to local state \n        // we pass this method in component as attribute value\n        // return console.log(\"delete handler called\", counterId);\n\n        //  When we want update states on change something we can directly we overrite. we take all elements and change what we want and send back\n        const counters = this.state.counters.filter(counter => counter.id !== counterId );\n        //this.setState({counters : counters}) ; // first counters is state property that is overriting using as key, and second is const object used as value defained line 25\n        this.setState({counters}); // if they are same we just write one\n    };\n    render(){\n        return(\n            <div>\n                {/* // COMPASING COMPONENTS */}\n                {/* Passing data to the components key is not one of them */}\n            {/*{this.state.counters.map( counter => <Counter key={counter.id} value={counter.value} selected/>)} */}  {/* selected same as selectd={true}, default is true */}\n            {/*{this.state.counters.map( counter => <Counter key={counter.id} value={counter.value} ><h1>Counter # {counter.id}</h1></Counter>)} */}  {/* what inside openning and closing tabs of component is called children, and they include props property (props.children), use case some times dialog box*/}\n           {/*{this.state.counters.map( counter => <Counter key={counter.id} value={counter.value} id = {counter.id}>{/*<h1>Counter # {counter.id}</h1>/}</Counter>)}  */}\n            {this.state.counters.map( counter => <Counter key={counter.id} value={counter.value} onDelete={this.deleteHandler} id = {counter.id}></Counter>)}  {/* passing method as attribute value or props and will invoke inside this component using its attribute name(this.props.onDelete)*/}\n            {/* <Counter/>\n            <Counter/>\n            <Counter/>\n            <Counter/> */}\n            </div>\n\n        );\n    }\n}\n\nexport default Counters;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,OAAO;AACjC,OAAOC,OAAO,MAAM,WAAW;;AAI/B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,QAAQ,SAASJ,SAAS;EAAAK,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KAC5BC,KAAK,GAAG;MACJC,QAAQ,EAAG,CACP;QAACC,EAAE,EAAG,CAAC;QAAEC,KAAK,EAAG;MAAG,CAAC,EACrB;QAACD,EAAE,EAAG,CAAC;QAAEC,KAAK,EAAG;MAAE,CAAC,EACpB;QAACD,EAAE,EAAG,CAAC;QAAEC,KAAK,EAAG;MAAE,CAAC,EACpB;QAACD,EAAE,EAAG,CAAC;QAAEC,KAAK,EAAG;MAAE,CAAC,EACpB;QAACD,EAAE,EAAG,CAAC;QAAEC,KAAK,EAAG;MAAE,CAAC;IAE5B,CAAC;IAAA,KAEDC,aAAa,GAAIC,SAAS,IAAI;MAC1B;MACA;MACA;;MAEA;MACA,MAAMJ,QAAQ,GAAG,IAAI,CAACD,KAAK,CAACC,QAAQ,CAACK,MAAM,CAACC,OAAO,IAAIA,OAAO,CAACL,EAAE,KAAKG,SAAU,CAAC;MACjF;MACA,IAAI,CAACG,QAAQ,CAAC;QAACP;MAAQ,CAAC,CAAC,CAAC,CAAC;IAC/B,CAAC;EAAA;EACDQ,MAAMA,CAAA,EAAE;IACJ,oBACIb,OAAA;MAAAc,QAAA,GAGwG,IAAE,EAC8B,IAAE,EAEzI,IAAI,CAACV,KAAK,CAACC,QAAQ,CAACU,GAAG,CAAEJ,OAAO,iBAAIX,OAAA,CAACF,OAAO;QAAkBS,KAAK,EAAEI,OAAO,CAACJ,KAAM;QAACS,QAAQ,EAAE,IAAI,CAACR,aAAc;QAACF,EAAE,EAAIK,OAAO,CAACL;MAAG,GAAjFK,OAAO,CAACL,EAAE;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiF,CAAC,CAAC,EAAC,IAAE;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAK9I,CAAC;EAGd;AACJ;AAEA,eAAenB,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}